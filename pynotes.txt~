Python Notes:

-- Variables Assignment:

- Variables names should be in lower case.
- White spaces are not allowed instead use _
- Python uses dynamic typing which means that any variable can be reassign to different datatype.
- to check datatype of variables in python use type() function.

--Strings in python:
- Strings are ordered collection of characters.
- Indexing [] and slicing can be done.
- Reverse indexing is also possible, it means last character will be -(strLength-1)
- Slicing allows to grabs some section of the string.
- Its syntax is as follows
    [start:stop:step]
    - start: numerical index for slice starting
    - stop: index value you will go to, but excluding it
    - step: size of jump you take.
- In python we can use escape sequence diretly inside '' and ""., example 
    print("Hello \nWorld")
    o/p - Hello
        World
- len() function is used to get length of string.

-- Indexing and Slicing with strings:
-Reverse indexing starts with index -1 because in reverse indexing 0 is considered 1st character of the string.
- step value in [start:end:step] ignores that number of character from starting point and prints the next character
    example> mystring = 'abcdefghij'
            mystring[::2]
            o/p: acegj
- we can print whole string as follows 
    mystring[:] or mystring[::]
- To reverse string use: mystring[::-1]

-- String Properties and Methods
- String are immutables i.e we cannot change character using index assignment.
- To grab each word of string in a list use slipt() method as:
>>> mystring = "Hello World"
>>> mystring.split()
['Hello', 'World']
- slpit() method splits the string using whitespaces if not character is provided.
- use hashtag # to comment line in code.

-- Print formatting with strings:
- string.format() method is used to format string
- syntax is as follows
  'something {} something {}'.format('str1', str2)
- In {} we can use index for altering position of string.
- Also we can assign variables/ keyword in {} as follows:
>>> print('{} is my {}'.format('India', 'country'))
India is my country
>>> print('{0} is my {1}'.format('India', 'country'))
India is my country
>>> print('{1} is my {1}'.format('India', 'country'))
country is my country
>>> print('{1} is my {1}'.format(i = 'India', c = 'country'))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: tuple index out of range
>>> print('{i} is my {c}'.format(i = 'India', c = 'country'))
India is my country
>>> ind = 'India'
>>> cnty = 'country'
>>> print('{} is my {}'.format(ind, cnty))
India is my country
>>>

- Floating point precision can also be formatted using following syntax:
  {value:width.precision f}
  width: number of digit to be printed before precision, extra withspace is added if no digit present.
  precisiion: number of digits to be printed after . in rounding manner

>>> result = 100/777
>>> print('Result is {}'.format(result))
Result is 0.1287001287001287
>>> print('Result is {r}'.format(r = result))
Result is 0.1287001287001287
>>> print('Result is {r:3.3f}'.format(r = result))
Result is 0.129

- Another method for string formatting and interpolation is f string method:
>>> print(f'{ind} is my {cnty}')
India is my country
>>> print(f'Result is {result:3.3f}')
Result is 0.129


--List in Python
- LIST is ordered sequence that holds variety of object types.
- Indexing and slicing is possible.
- Elements are comma seperated.
- All method that we use for string can be implemented in list also.
- Difference between string and list is that list are mutable i.e, we can change any element in list using index operator.
>>> my_list = ['Sanket', 17, 90.9, True]
>>> my_list
['Sanket', 17, 90.9, True]
>>> len(my_list)
4
>>> my_list.append('One')
>>> my_list
['Sanket', 17, 90.9, True, 'One']
>>> my_list.pop()
'One'
>>> my_list
['Sanket', 17, 90.9, True]
>>> my_list.pop(2)
90.9
>>> my_list
['Sanket', 17, True]
>>> my_list[3] = 'One'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: list assignment index out of range
>>> 

- append() method is used to add an element at the end of the list.
- pop() method is used to remove last element from the list.
- If we provide index in pop() element on that index will be removed, hence default index for pop() is -1.
- sort() function is used to sort the element in the element in place i.e, sort() doesnot return any new list, it performs action in the same list.
- sort() is performed if all the elements in the list are of same type.
- reverse() function is used to reverse list in decending format. It also performs in place reversing.

--Dictionaries in Python
-Dictionaries are unordered mappings for storing objets.
- Data is stored in key-value pair, key-value pair advantage is that it grabs data quickly than that of indexes.
- They are unordered and cannot be sorted.
- Syntax for dictionaries are:
  my_dict = {'key1': 'value1', 'key2':'value2'}
- Dictionaries key can hold any kind of data like basic datatypes, list and another dictionaries itself.
- dict.keys() method returns all keys in the dictionaries.
- dict.values() method returns all values in the dictionaries.
- dict.items() method returns all keys-value pairs in the dictionaries.
>>> my_dict = {'key1': 100, 'key2': [1,2,3], 'key3': {'in': True, 'out': False}}
>>> my_dict
{'key1': 100, 'key2': [1, 2, 3], 'key3': {'in': True, 'out': False}}
>>> len(my_dict)
3
>>> my_dict.keys()
dict_keys(['key1', 'key2', 'key3'])
>>> my_dict.valuess()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'dict' object has no attribute 'valuess'
>>> my_dict.values()
dict_values([100, [1, 2, 3], {'in': True, 'out': False}])
>>> my_dict.items()
dict_items([('key1', 100), ('key2', [1, 2, 3]), ('key3', {'in': True, 'out': False})])
>>> my_dict['key3']['out']
False

--Tuples with Pyhton
- Tuples are very similar to that of list.
- Main difference is that they are immutable.
- Once element is inside tuple it cannot be reassigned.
- Tuples uses parenthesis: (1,2,3)
- All index and slicing operation that are performed on list can also be performed on tuples.
- tuple.count(element) method returns count of occurance of 'element' in tuple.
- tuple.index(element) method returns index of first occurance of 'element' in tuple.
>>> mytuple = (3,5,7,1)
>>> mytuple
(3, 5, 7, 1)
>>> mytuple.sort()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'tuple' object has no attribute 'sort'
>>> mytuple.count(1)
1
>>> mytuple.index(1)
3
>>> mytuple[0:3]
(3, 5, 7)
>>> mytuple[0:3:2]
(3, 7)
>>> mytuple[::]
(3, 5, 7, 1)

--Sets in Python
- Sets are unordered collection of unique elements.
- There can be only one set of object at a time.
- Sets are created using set() function.
- Set are represented using {} the only difference is that dictionaries contains key-value pair.
- Elements are added in the set using add() method.
>> myset = set()
>>> myset.add(1)
>>> myset
{1}
>>> myset.add(2)
>>> myset
{1, 2}
>>> myset.add(2)
>>> myset
{1, 2}
>>> my_set_list = [1,1,1,2,2,2,3,3]
>>> set(my_set_list)
{1, 2, 3}

--Boolean in Python
- Booleans represent truth/false of expression or statements.
- In python, booleans are represented as True or False.
- type(True) is bool.
- In python when we don't want to assign variable any value, we can specify its type as None.

 

