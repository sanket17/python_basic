Python Notes:

-- Variables Assignment:

- Variables names should be in lower case.
- White spaces are not allowed instead use _
- Python uses dynamic typing which means that any variable can be reassign to different datatype.
- to check datatype of variables in python use type() function.

--Strings in python:
- Strings are ordered collection of characters.
- Indexing [] and slicing can be done.
- Reverse indexing is also possible, it means last character will be -(strLength-1)
- Slicing allows to grabs some section of the string.
- Its syntax is as follows
    [start:stop:step]
    - start: numerical index for slice starting
    - stop: index value you will go to, but excluding it
    - step: size of jump you take.
- In python we can use escape sequence diretly inside '' and ""., example 
    print("Hello \nWorld")
    o/p - Hello
        World
- len() function is used to get length of string.

-- Indexing and Slicing with strings:
-Reverse indexing starts with index -1 because in reverse indexing 0 is considered 1st character of the string.
- step value in [start:end:step] ignores that number of character from starting point and prints the next character
    example> mystring = 'abcdefghij'
            mystring[::2]
            o/p: acegj
- we can print whole string as follows 
    mystring[:] or mystring[::]
- To reverse string use: mystring[::-1]

-- String Properties and Methods
- String are immutables i.e we cannot change character using index assignment.
- To grab each word of string in a list use slipt() method as:
>>> mystring = "Hello World"
>>> mystring.split()
['Hello', 'World']
- slpit() method splits the string using whitespaces if not character is provided.
- use hashtag # to comment line in code.

-- Print formatting with strings:
- string.format() method is used to format string
- syntax is as follows
  'something {} something {}'.format('str1', str2)
- In {} we can use index for altering position of string.
- Also we can assign variables/ keyword in {} as follows:
>>> print('{} is my {}'.format('India', 'country'))
India is my country
>>> print('{0} is my {1}'.format('India', 'country'))
India is my country
>>> print('{1} is my {1}'.format('India', 'country'))
country is my country
>>> print('{1} is my {1}'.format(i = 'India', c = 'country'))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: tuple index out of range
>>> print('{i} is my {c}'.format(i = 'India', c = 'country'))
India is my country
>>> ind = 'India'
>>> cnty = 'country'
>>> print('{} is my {}'.format(ind, cnty))
India is my country
>>>

- Floating point precision can also be formatted using following syntax:
  {value:width.precision f}
  width: number of digit to be printed before precision, extra withspace is added if no digit present.
  precisiion: number of digits to be printed after . in rounding manner

>>> result = 100/777
>>> print('Result is {}'.format(result))
Result is 0.1287001287001287
>>> print('Result is {r}'.format(r = result))
Result is 0.1287001287001287
>>> print('Result is {r:3.3f}'.format(r = result))
Result is 0.129

- Another method for string formatting and interpolation is f string method:
>>> print(f'{ind} is my {cnty}')
India is my country
>>> print(f'Result is {result:3.3f}')
Result is 0.129


--List in Python
- LIST is ordered sequence that holds variety of object types.
- Indexing and slicing is possible.
- Elements are comma seperated.
- All method that we use for string can be implemented in list also.
- Difference between string and list is that list are mutable i.e, we can change any element in list using index operator.
>>> my_list = ['Sanket', 17, 90.9, True]
>>> my_list
['Sanket', 17, 90.9, True]
>>> len(my_list)
4
>>> my_list.append('One')
>>> my_list
['Sanket', 17, 90.9, True, 'One']
>>> my_list.pop()
'One'
>>> my_list
['Sanket', 17, 90.9, True]
>>> my_list.pop(2)
90.9
>>> my_list
['Sanket', 17, True]
>>> my_list[3] = 'One'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: list assignment index out of range
>>> 

- append() method is used to add an element at the end of the list.
- pop() method is used to remove last element from the list.
- If we provide index in pop() element on that index will be removed, hence default index for pop() is -1.
- sort() function is used to sort the element in the element in place i.e, sort() doesnot return any new list, it performs action in the same list.
- sort() is performed if all the elements in the list are of same type.
- reverse() function is used to reverse list in decending format. It also performs in place reversing.

--Dictionaries in Python
-Dictionaries are unordered mappings for storing objets.
- Data is stored in key-value pair, key-value pair advantage is that it grabs data quickly than that of indexes.
- They are unordered and cannot be sorted.
- Syntax for dictionaries are:
  my_dict = {'key1': 'value1', 'key2':'value2'}
- Dictionaries key can hold any kind of data like basic datatypes, list and another dictionaries itself.
- dict.keys() method returns all keys in the dictionaries.
- dict.values() method returns all values in the dictionaries.
- dict.items() method returns all keys-value pairs in the dictionaries.
>>> my_dict = {'key1': 100, 'key2': [1,2,3], 'key3': {'in': True, 'out': False}}
>>> my_dict
{'key1': 100, 'key2': [1, 2, 3], 'key3': {'in': True, 'out': False}}
>>> len(my_dict)
3
>>> my_dict.keys()
dict_keys(['key1', 'key2', 'key3'])
>>> my_dict.valuess()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'dict' object has no attribute 'valuess'
>>> my_dict.values()
dict_values([100, [1, 2, 3], {'in': True, 'out': False}])
>>> my_dict.items()
dict_items([('key1', 100), ('key2', [1, 2, 3]), ('key3', {'in': True, 'out': False})])
>>> my_dict['key3']['out']
False

--Tuples with Pyhton
- Tuples are very similar to that of list.
- Main difference is that they are immutable.
- Once element is inside tuple it cannot be reassigned.
- Tuples uses parenthesis: (1,2,3)
- All index and slicing operation that are performed on list can also be performed on tuples.
- tuple.count(element) method returns count of occurance of 'element' in tuple.
- tuple.index(element) method returns index of first occurance of 'element' in tuple.
>>> mytuple = (3,5,7,1)
>>> mytuple
(3, 5, 7, 1)
>>> mytuple.sort()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'tuple' object has no attribute 'sort'
>>> mytuple.count(1)
1
>>> mytuple.index(1)
3
>>> mytuple[0:3]
(3, 5, 7)
>>> mytuple[0:3:2]
(3, 7)
>>> mytuple[::]
(3, 5, 7, 1)

--Sets in Python
- Sets are unordered collection of unique elements.
- There can be only one set of object at a time.
- Sets are created using set() function.
- Set are represented using {} the only difference is that dictionaries contains key-value pair.
- Elements are added in the set using add() method.
>> myset = set()
>>> myset.add(1)
>>> myset
{1}
>>> myset.add(2)
>>> myset
{1, 2}
>>> myset.add(2)
>>> myset
{1, 2}
>>> my_set_list = [1,1,1,2,2,2,3,3]
>>> set(my_set_list)
{1, 2, 3}

--Boolean in Python
- Booleans represent truth/false of expression or statements.
- In python, booleans are represented as True or False.
- type(True) is bool.
- In python when we don't want to assign variable any value, we can specify its type as None.

--I/O with basic files in Python
- To open a file in python use open() function.
- To read a file use read().
- To read lines in list format use readlines() method.
- To please file descriptor at starting point use seek() method.
- To close file use close() method.
- If we forget to close the file using close() method then we might get an error while externally accessing the file.
- This can be solved using following syntax.

with open('myfile.txt') as my_new_file:
    new_content = my_new_file.readlines()
    print(new_content)

- The  above syntax is similar to normal file operation.
- When the file is opened with the above syntax it is only accessible within its given scope.
- And after that scope file gets automatically closed.

Basic Practice:

http://codingbat.com/python

More Mathematical (and Harder) Practice:

https://projecteuler.net/archives

List of Practice Problems:

http://www.codeabbey.com/index/task_list

A SubReddit Devoted to Daily Practice Problems:

https://www.reddit.com/r/dailyprogrammer

A very tricky website with very few hints and touch problems (Not for beginners but still interesting)

http://www.pythonchallenge.com/


--Logical Operators in Python
- key logical operator keywords are: and or not

-- for loop
- Syntax:
  iterativeObj = something
  for tempvar in iterativeObj:
    print(tempvar)

-- while loops in Pyhton
- Syntax:
  while some_cond:
    #do something
  else:
    # only prints when some_cond is false
- break: Breaks out of current closest enclosing loop.
- continue: Goes to the top of closest enclosing loop.
- pass: Does nothing at all.
- Use of pass keyword: Following code gives error

for items in iterativeItem:
  # comment
  
- As we have inserted commet in the loop scope, python interpreter need a statement other that comment.
- Hence to solve this error we need to insert a placeholder.
- pass keyword can be inserted if we want to add a placeholder, so the above code can be modified as

for items in iterativeItem:
  # comment
  pass

-- Useful operator in python
- range(start, stop,[step]): Its is a generator operator.
- generators are special operator/function which generate data
- If we want to print element using indexes we can use enumrate operator
- enumerate() return a tuple which contains (indexNumber, element_at_that_index)
- zip(list1, list2) create a list of pair in form of tuples mapping value x from list1 with value y from list2 as (x,y)
- zip() create pair upto shortest length of any of the list provided.
- in operator is used to check whether a given value is present in list or dictionaries
- in operator returns boolean value.
>>> mylist = [1,2,3,4]
>>> mylist
[1, 2, 3, 4]
>>> 4 in mylist
True
>>> mytuple = (5,6,7)
>>> mytuple
(5, 6, 7)
>>> 6 in mytuple
True
>>> mydict = {'k1':1, 'k2':2}
>>> mydict
{'k1': 1, 'k2': 2}
>>> 1 in mydict
False
>>> k1 in mydict
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'k1' is not defined
>>> 'k1' in mydict
True
>>> 'k1' in mydict.items()
False
>>> 'k1' in mydict.keys()
True
>>> 2 in mydict.items()
False
>>> 2 in mydict.values()
True

- max() and min() function are used to fetch max and min values from given list/tuples
- shuffle() methods shuffle's list IN PLACE.
- random(start_limit, end_limit): is used to return a random number with specified range.
- input() function is used to get input from user in string format.
- int(), float(), str() are use for type conversion.

-- List comprehensions in python
- List comprehensions are unique way of quickly creating a list with python.
- Its implementation is given in LoopStatement.py file.

--Function in python
- Syntax:
    def function_name(arg):
        #function code

    function_name('something')
-Function name should be lower case and multi words should be seperated using _
- We must provide DOCSTRING which act as manual for user defined functions.
- it is defined in following manner:
  ,,,
  DOCSTRING: Information about function.
  INPUT: name of input args
  OUTPUT: expected output 
  '''

  -- *args and **kwargs in python
  - args - arguments
  - kwargs - keyword arguments

  -- Lambda Expression, Map and Filter Functions:
  - Lambda expression are basically used to create an anonymous function quickly which can be used only one time.
  - map(func, *iterableObj) - when we need to apply a function to every element in iterable object we just use map() function.
  - map() returns a new object whose every element has been applied with the function passed to map.
  - filter(func, *iterableObj) - when we need to extract a particular set of element from iterableObject which satisfies given function condn then we can use filter().
  - The func that we pass to filter() must return a boolean value.
  

--Nested statement and scope
- Python uses following rule for assign accessing variable:
LEBG Rule:
L: Local: variables assigned in function
E: Enclosing function locals - or nearest parent function scope.
G: Global(module) variable assigned at top level of file/module file or declared as 'global var' inside any function.
B: Built-In(Python) - Names preassigned in the built-in names modules: open, range, SyntaxError..

following is example of scoping

#Global
x = 100

def greet():
  #Enclosing
  x = 200

  def sayHello():
    #Local
    x = 300
    print(x)
- To access global variable in greet() use 
  global x 


-- Object Oriented Programming in Python
- Following is the syntax to create class:

  class MyClassName:
    def __init__(self, att):
      self.att = att
    
    def some_method(self):
      self.att = True

- Class name should be Pascal case.
- __int__ is called constructor.
- self is similar to this.
- For each method we need to pass reference of this
- Class Object Attribute - This are attribute that are share common value for every object created.
- They are defined above __init__method.
- They are reference using self.varName or ClassName.varName
- We can also pass default parameter for any method we define as well as for init().

-- Inheritance and Polymorphism
- To inherit a base class use follow syntax:
  class DerivedClass(BaseClass):
      def __init__(self):
        #Derived class constructor
        BaseClass.__init__(self) #Base class constructor

      #Derived class method
- We can call/override base class method using derived class instance

-- Special Magic/Dunder Methods
- len(), print(), str(), del keyword are generic methods.
- We can use this method with list, set, tuples etc.
- But when we use them with object the give out error.
- Hence in order to use these method with our object we can use special method called as magic or dunder method.
- This method start and end with __(double underscore).
- __str__ - method is used to print out string representation of our object.
- __len__ function can be used to print out any numerical value representing that object.
- __del__ function is used to perform some extra operation needs to be perform while deleting the object.

-- Modules and Packages in Python
-PyPI is a repository for open-source third-party Pyhton Packages.
- It is similar to npm for nodejs.
- Modules is just a .py script that you call in another .py script.
- Packages are collection of modules.-
- To create a package add __init__.py.
- This is an empty file.
- To import this package use follow syntax:
  from FolderName import FileName

  FileName.functionName()

  -- __name__ and __main__
  - When ever we run our file "__main__" string is assigned to "__name__" variable.
  - It is a built-in varible of Python,
  - Using this variable we can check whether a module is run or is imported from another package.

  -- Error and Exception handling
  - Eror handling is similar to that of in another programming languages used.
  - We have try-except-else-finally block.
  - try block is a block where we test our code for error.
  - except block is triggered when we get an error in try block.
  - else block is followed after except block, this block is executed when we get no error in try block.
  - And finally block is executed after the execution of except or else block.

-- PyLint Overview
- For testing we use following tools:
- Pylint: This is a library that looks at your code and report back possible issues. Issues basically related to indentation, styling and variable assignment.
- unittest - This built-in library  will allow you to test your own programs and check are you getting desired outputs.
- Python has a set of style convention rules known as 'PEP8'.
- To run a pylint use below command:
  pylint program-name.py
- To improve our rating of pylint use below tips:
 - Add DOCSTRING at the begin of any module.
 - Add DOCSTRING for every user-defined function.
 - Add new line at eof
- unittesting demo is given in unitTesting.py file.

-- Decorators in Python
- Decorator allows you to decorate your function.
 
